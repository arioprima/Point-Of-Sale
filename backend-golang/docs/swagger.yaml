definitions:
  request.UserCreateRequest:
    properties:
      email:
        type: string
      firstname:
        maxLength: 20
        minLength: 2
        type: string
      image:
        type: string
      lastname:
        type: string
      password:
        maxLength: 20
        minLength: 4
        type: string
      role:
        type: string
      username:
        maxLength: 20
        minLength: 2
        type: string
    required:
    - email
    - firstname
    - password
    - username
    type: object
  request.UserLoginRequest:
    properties:
      password:
        maxLength: 20
        minLength: 4
        type: string
      username:
        maxLength: 20
        minLength: 2
        type: string
    required:
    - password
    - username
    type: object
  request.UserUpdateRequest:
    properties:
      firstname:
        maxLength: 20
        minLength: 2
        type: string
      image:
        type: string
      lastname:
        type: string
      user_id:
        type: string
    required:
    - firstname
    - user_id
    type: object
  response.Response:
    properties:
      data: {}
      message:
        type: string
      status:
        type: integer
    type: object
info:
  contact: {}
paths:
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Handles user login.
      parameters:
      - description: User Login Request
        in: body
        name: tags
        required: true
        schema:
          $ref: '#/definitions/request.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Login
      tags:
      - Auth
  /api/auth/register:
    post:
      consumes:
      - application/json
      description: Registers a new user.
      parameters:
      - description: User Create Request
        in: body
        name: tags
        required: true
        schema:
          $ref: '#/definitions/request.UserCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.Response'
      summary: Register
      tags:
      - Auth
  /api/product:
    get:
      consumes:
      - application/json
      description: Retrieves all products.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Retrieve all products
      tags:
      - Product
    post:
      consumes:
      - application/json
      description: Registers a new product.
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
      summary: Register a new product
      tags:
      - Product
    put:
      consumes:
      - application/json
      description: Modifies an existing product.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Update an existing product
      tags:
      - Product
  /api/product/{product_id}:
    delete:
      consumes:
      - application/json
      description: Deletes an existing product by its ID.
      parameters:
      - description: Product ID to delete
        in: path
        name: product_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Delete an existing product
      tags:
      - Product
    get:
      consumes:
      - application/json
      description: Retrieves a product by its ID.
      parameters:
      - description: Product ID to retrieve
        in: path
        name: product_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Find a product by ID
      tags:
      - Product
  /api/product/{product_name}:
    get:
      consumes:
      - application/json
      description: Retrieves a product by its name.
      parameters:
      - description: Product name to retrieve
        in: path
        name: product_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Find a product by name
      tags:
      - Product
  /api/users:
    get:
      consumes:
      - application/json
      description: Retrieves all users.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - Bearer: []
      summary: Find All
      tags:
      - User
  /api/users/{id}:
    get:
      consumes:
      - application/json
      description: Finds a user by ID.
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Find By Id
      tags:
      - User
  /api/users/delete:
    post:
      consumes:
      - application/json
      description: Deletes an existing user by its ID.
      parameters:
      - description: User ID to delete
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Delete
      tags:
      - User
  /api/users/email/{email}:
    get:
      consumes:
      - application/json
      description: Finds a user by email.
      parameters:
      - description: Email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Find By Email
      tags:
      - User
  /api/users/update:
    post:
      consumes:
      - application/json
      description: Updates user information.
      parameters:
      - description: User Update Request
        in: body
        name: tags
        required: true
        schema:
          $ref: '#/definitions/request.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Update
      tags:
      - User
  /api/users/username/{username}:
    get:
      consumes:
      - application/json
      description: Finds a user by username.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Find By Username
      tags:
      - User
swagger: "2.0"
